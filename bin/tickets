#!/usr/bin/env node

var program = require('commander'),
  chalk = require('chalk');

var tickets = require('../lib/tickets'),
  constants = require('../lib/constants');

function jira(val, memo){
  var jira = {};

  if (val.indexOf('@') > -1){
    var auth = val.split('@')[0].split(':');
    jira['username'] = auth[0];
    jira['password'] = auth[1];

    val = val.slice(val.indexOf('@') + 1);
  }

  if (val.indexOf(':') > -1){
    jira['url'] = val.substr(0, val.lastIndexOf(':'));
    jira['keys'] = val.substr(val.lastIndexOf(':') + 1).split(',');
  } else {
    jira['url'] = val;
  }

  memo.push(jira);
}

program.description('Tickets for Titanium')
  .version(require('../package.json').version, '-v, --version')
  .option('-d, --dir <value>', 'directory to search in [default: ' + chalk.cyan(constants.opts.dir) + ']')
  .option('-e, --extensions <items>', 'comma-separated list of file extensions or ' + chalk.cyan('+') + ' for all [default: ' + chalk.cyan(constants.opts.extensions.join(',')) + ']]', function(val) {
    return (val === '+') ? val : val.split(',');
  })
  .option('-k, --keys <items>', 'comma-separated list of JIRA project keys or ' + chalk.cyan('+') + ' for all [default: ' + chalk.cyan(constants.opts.keys.join(',')) + ']', function(val) {
    return (val === '+') ? val : val.split(',');
  })
  .option('-j, --jira [value]', 'reapeatable jira configuration [example: user:password@http://jira.company.com/:KEY1,KEY2 ]', jira, [])
  .option('-U, --url <value>', 'url of the JIRA install to query [default: ' + chalk.cyan(constants.opts.url) + ']')
  .option('-u, --username <value>', 'optional username to login to JIRA')
  .option('-p, --password <value>', 'optional password to login to JIRA');

program.parse(process.argv);

tickets(program);
