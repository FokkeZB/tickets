#!/usr/bin/env node

var program = require('commander'),
  chalk = require('chalk');

var tickets = require('../lib/tickets'),
  constants = require('../lib/constants');

function jira(val, memo) {
  var set = {};

  if (val.indexOf('@') > -1) {
    var auth = val.split('@')[0].split(':');

    set.username = auth[0];
    set.password = auth[1];

    val = val.slice(val.indexOf('@') + 1);
  }

  if ((val.match(/:/g) || []).length > 1) {
    set.url = val.substr(0, val.lastIndexOf(':'));
    set.keys = val.substr(val.lastIndexOf(':') + 1).split(',');

  } else {
    set.url = val;
  }

  memo.push(set);

  return memo;
}

program.description('Tickets for Titanium')
  .version(require('../package.json').version, '-v, --version')
  .option('-d, --dir <value>', 'directory to search in [default: ' + chalk.cyan(constants.opts.dir) + ']')
  .option('-e, --extensions <items>', 'comma-separated list of file extensions or ' + chalk.cyan('+') + ' for all [default: ' + chalk.cyan(constants.opts.extensions.join(',')) + ']]', function(val) {
    return (val === '+') ? val : val.split(',');
  })
  .option('-k, --keys <items>', 'comma-separated list of JIRA project keys or ' + chalk.cyan('+') + ' for all [default: ' + chalk.cyan(constants.opts.keys.join(',')) + ']', function(val) {
    return (val === '+') ? val : val.split(',');
  })
  .option('-j, --jira <value>', 'either: url of the JIRA install [default: ' + chalk.cyan(constants.opts.jira[0].url) + ']\n\t or: reapeatable jira configuration [example: user:password@http://jira.company.com/:KEY1,KEY2 ]', jira, [])
  .option('-u, --username <value>', 'optional username to login to JIRA')
  .option('-p, --password <value>', 'optional password to login to JIRA');

program.parse(process.argv);

if (program.jira.length > 0) {
  program.jira.forEach(function(jira) {
    ['keys', 'username', 'password'].forEach(function(prop) {
      !jira.hasOwnProperty(prop) && (jira[prop] = program[prop] || constants.opts[prop]);
    });
  });
} else {
  program.jira = constants.opts.jira;
}

tickets(program);